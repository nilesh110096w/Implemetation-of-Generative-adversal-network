#Libraries to import

import torch
from tensorflow import keras
from random import shuffle
import torch.nn
import torch.functional
from torch.autograd import Variable
from torch import optim
from torch import nn

-----------------------------------------------------------------------

#Global variables
batch_size = 32
num_epochs = 10

-------------------------------------------------------------------------

###################Data pre-processing##########################

fashion_mnist = keras.datasets.fashion_mnist
(train_images, train_labels), (test_images, test_labels) = fashion_mnist.load_data()

class_names = ['T-shirt/top', 'Trouser', 'Pullover', 'Dress', 'Coat',
               'Sandal', 'Shirt', 'Sneaker', 'Bag', 'Ankle boot']

#Image pre-processing
train_images = train_images / 255
test_images = test_images / 255

train_images = train_images.reshape((train_images.shape[0], 28, 28, 1))
test_images = test_images.reshape((test_images.shape[0], 28, 28, 1))

#Converting Numpy ro tensor
train_images = torch.from_numpy(train_images)
train_labels = torch.from_numpy(train_labels)
test_images = torch.from_numpy(test_images)
test_labels = torch.from_numpy(test_labels)

------------------------------------------------------------------------------------------
###################### Data loader for batch processing ####################

data_loader = torch.utils.data.DataLoader(zip(train_images, train_labels), 
                                   batch_size=batch_size)

------------------------------------------------------------------------------------------
####################### Discriminator neural network #########################

class DiscriminatorNet(torch.nn.Module):
    """
    A three hidden-layer discriminative neural network
    """
    def __init__(self):
        super(DiscriminatorNet, self).__init__()
        n_features = 784
        n_out = 1
        
        self.hidden0 = torch.nn.Sequential( 
            torch.nn.Linear(n_features, 1024),
            torch.nn.LeakyReLU(0.2),
            torch.nn.Dropout(0.3)
        )
        self.hidden1 = torch.nn.Sequential(
            torch.nn.Linear(1024, 512),
            torch.nn.LeakyReLU(0.2),
            torch.nn.Dropout(0.3)
        )
        self.hidden2 = torch.nn.Sequential(
            torch.nn.Linear(512, 256),
            torch.nn.LeakyReLU(0.2),
            torch.nn.Dropout(0.3)
        )
        self.out = torch.nn.Sequential(
            torch.nn.Linear(256, n_out),
            torch.nn.Sigmoid()
        )

    def forward(self, x):
        x = self.hidden0(x)
        x = self.hidden1(x)
        x = self.hidden2(x)
        x = self.out(x)
        return x
-----------------------------------------------------------------------------------------
#######################Generator neural network##############################

class GeneratorNet(torch.nn.Module):
    """
    A three hidden-layer generative neural network
    """
    def __init__(self):
        super(GeneratorNet, self).__init__()
        n_features = 100
        n_out = 784
        
        self.hidden0 = torch.nn.Sequential(
            torch.nn.Linear(n_features, 256),
            torch.nn.LeakyReLU(0.2)
        )
        self.hidden1 = torch.nn.Sequential(            
            torch.nn.Linear(256, 512),
            torch.nn.LeakyReLU(0.2)
        )
        self.hidden2 = torch.nn.Sequential(
            torch.nn.Linear(512, 1024),
            torch.nn.LeakyReLU(0.2)
        )
        
        self.out = torch.nn.Sequential(
            torch.nn.Linear(1024, n_out),
            torch.nn.Tanh()
        )

    def forward(self, x):
        x = self.hidden0(x)
        x = self.hidden1(x)
        x = self.hidden2(x)
        x = self.out(x)
        return x

------------------------------------------------------------------------------------------
#################To generate no gaussian noise vector N(0,1) to feed to generator##########

def noise(size):
    '''
    Generates a 1-d vector of gaussian sampled random values
    '''
    n = Variable(torch.randn(size, 100))
    return n

------------------------------------------------------------------------------------------
#################3Target value for D(image taken from real images population)############

def ones_target(size):
    '''
    Tensor containing ones, with shape = size
    '''
    data = Variable(torch.ones(size, 1))
    return data

#Target value for D(g(z)), z is rv N(0,1)
def zeros_target(size):
    '''
    Tensor containing zeros, with shape = size
    '''
    data = Variable(torch.zeros(size, 1))
    return data
-----------------------------------------------------------------------------------------
################ To train discriminator ##############################################

def train_discriminator(optimizer, real_data, fake_data):
    N = real_data.size(0)
    # Reset gradients
    optimizer.zero_grad()
    
    # 1.1 Train on Real Data
    prediction_real = discriminator(real_data.float())
    # Calculate error and backpropagate
    
    #find loss function between predicted score and '1'(since image is real_data)
    error_real = loss(prediction_real, ones_target(N) )
    error_real.backward()

    # 1.2 Train on Fake Data
    prediction_fake = discriminator(fake_data.float())
    # Calculate error and backpropagate
    error_fake = loss(prediction_fake, zeros_target(N))
    error_fake.backward()
    
    # 1.3 Update weights with gradients
    optimizer.step()
    
    # Return error and predictions for real and fake inputs
    return error_real + error_fake, prediction_real, prediction_fake
------------------------------------------------------------------------------------------
###############To train generator #####################################################

def train_generator(optimizer, fake_data):
    N = fake_data.size(0)
    # Reset gradients
    optimizer.zero_grad()
    # Sample noise and generate fake data
    prediction = discriminator(fake_data.float())
    # Calculate error and backpropagate
    error = loss(prediction, ones_target(N))
    error.backward()
    # Update weights with gradients
    optimizer.step()
    # Return error
    return error
-------------------------------------------------------------------------------------------
#For flattening images to 1D vector
def images_to_vectors(images):
    return images.view(images.size(0), 784)

#For flattening 1D vector to 2D images
def vectors_to_images(vectors):
    return vectors.view(vectors.size(0), 1, 28, 28)
-------------------------------------------------------------------------------------------

#############Generationg data for testingto generate images ##########################

num_test_samples = 16
test_noise = noise(num_test_samples)

-----------------------------------------------------------------------------------------



############### Main code ######################

#Optimizer for loss function
d_optimizer = optim.Adam(discriminator.parameters(), lr=0.0002)
g_optimizer = optim.Adam(generator.parameters(), lr=0.0002)
loss = nn.BCELoss() # This has form ofcost 


#Creating object for generator and discriminator

discriminator = DiscriminatorNet()

generator = GeneratorNet()



for epoch in range(num_epochs):
    for n_batch, (real_batch,_) in enumerate(data_loader):
        N = real_batch.size(0) 
        # 1. Train Discriminator
        real_data = Variable(images_to_vectors(real_batch))
        # Generate fake data and detach 
        # (so gradients are not calculated for generator)
        
        #Generate batch of noisy data
        
        fake_data = generator(noise(N)).detach()
        # Train D
        d_error, d_pred_real, d_pred_fake = train_discriminator(d_optimizer, real_data, fake_data)

        # 2. Train Generator
        # Generate fake data
        fake_data = generator(noise(N))
        # Train G
        g_error = train_generator(g_optimizer, fake_data)
        # Log batch error
        #logger.log(d_error, g_error, epoch, n_batch, num_batches)
    print(epoch)
      
 -------------------------------------------------------------------------------------------------
########################To view generated images from noisy input###############################33

import matplotlib.pyplot as plt
import matplotlib.image as mpimg
img_w, img_h = 200, 200
#send noise to generator
for num_images in range(10):
    a = generator(Variable(torch.randn(100)))
    a = a.view(28,28,1)
    plt.imshow(a.detach().numpy()[:,:,0])     

